name: ü§ñ MCP Auto-Fix Failed Tests

on:
  workflow_run:
    workflows: ["üéÆ KOTOR.ai UE5 Build & Test Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      failed_test:
        description: 'Specific test to fix (e.g., T-106)'
        required: false
        type: string
      error_context:
        description: 'Error context or log snippet'
        required: false
        type: string

env:
  PROJECT_NAME: KOTOR_Clone

jobs:
  # ============================================================================
  # üîç Analyze Test Failures
  # ============================================================================
  analyze-failures:
    name: üîç Analyze Test Failures
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch'
    outputs:
      has-failures: ${{ steps.analysis.outputs.has-failures }}
      failed-tests: ${{ steps.analysis.outputs.failed-tests }}
      error-logs: ${{ steps.analysis.outputs.error-logs }}
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üì¶ Download Test Reports
      if: github.event.workflow_run.conclusion == 'failure'
      uses: actions/download-artifact@v4
      with:
        name: test-reports-Development
        path: TestReports/
      continue-on-error: true

    - name: üîç Analyze Test Failures
      id: analysis
      shell: bash
      run: |
        echo "üîç Analyzing test failures..."
        
        failed_tests=""
        error_logs=""
        has_failures=false
        
        # Check for manual input
        if [ "${{ github.event.inputs.failed_test }}" != "" ]; then
          failed_tests="${{ github.event.inputs.failed_test }}"
          error_logs="${{ github.event.inputs.error_context }}"
          has_failures=true
          echo "üìù Manual test failure input: $failed_tests"
        fi
        
        # Analyze test reports if available
        if [ -d "TestReports" ]; then
          echo "üìä Analyzing test reports..."
          
          # Look for common failure patterns
          if find TestReports -name "*.log" -exec grep -l "FAILED\|ERROR\|CRASH" {} \; | head -5; then
            has_failures=true
            
            # Extract failed test names
            failed_tests=$(find TestReports -name "*.log" -exec grep -o "Test.*FAILED" {} \; | head -10 | tr '\n' ',' | sed 's/,$//')
            
            # Extract error context
            error_logs=$(find TestReports -name "*.log" -exec grep -A 3 -B 3 "ERROR\|CRASH\|null pointer\|access violation" {} \; | head -20 | tr '\n' '|')
          fi
        fi
        
        echo "has-failures=$has_failures" >> $GITHUB_OUTPUT
        echo "failed-tests=$failed_tests" >> $GITHUB_OUTPUT
        echo "error-logs=$error_logs" >> $GITHUB_OUTPUT
        
        if [ "$has_failures" = "true" ]; then
          echo "‚ùå Test failures detected: $failed_tests"
        else
          echo "‚úÖ No test failures to analyze"
        fi

  # ============================================================================
  # ü§ñ MCP Codex Auto-Fix
  # ============================================================================
  mcp-auto-fix:
    name: ü§ñ MCP Codex Auto-Fix
    runs-on: ubuntu-latest
    needs: analyze-failures
    if: needs.analyze-failures.outputs.has-failures == 'true'
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: üêç Setup Python for MCP
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install MCP Dependencies
      run: |
        pip install openai anthropic requests python-dotenv
        echo "ü§ñ MCP dependencies installed"

    - name: ü§ñ Generate Fix with MCP Codex
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cat > mcp_auto_fix.py << 'EOF'
        import os
        import json
        import subprocess
        from pathlib import Path
        
        # MCP Auto-Fix Script for KOTOR.ai
        class MCPAutoFix:
            def __init__(self):
                self.failed_tests = "${{ needs.analyze-failures.outputs.failed-tests }}"
                self.error_logs = "${{ needs.analyze-failures.outputs.error-logs }}".replace('|', '\n')
                self.project_root = Path.cwd()
                
            def analyze_codebase(self):
                """Analyze codebase structure for context"""
                print("üîç Analyzing KOTOR.ai codebase structure...")
                
                # Find relevant source files
                source_files = []
                for pattern in ["**/*.cpp", "**/*.h", "**/*.cs"]:
                    source_files.extend(list(self.project_root.glob(f"Source/{pattern}")))
                
                # Focus on files likely related to failed tests
                relevant_files = []
                for file in source_files:
                    file_content = file.read_text(encoding='utf-8', errors='ignore')
                    if any(test in file_content for test in self.failed_tests.split(',')):
                        relevant_files.append(file)
                
                return relevant_files
            
            def generate_fix_prompt(self, file_path, file_content):
                """Generate MCP prompt for fixing the file"""
                return f"""
        You are an expert Unreal Engine 5 C++ developer working on KOTOR.ai, an advanced AI-driven RPG framework.
        
        FAILED TESTS: {self.failed_tests}
        ERROR CONTEXT: {self.error_logs}
        
        FILE TO FIX: {file_path}
        
        CURRENT CODE:
        ```cpp
        {file_content}
        ```
        
        TASK: Analyze the code and fix any issues that could cause the failed tests. Common issues include:
        - Null pointer dereferences
        - Uninitialized variables
        - Missing null checks
        - Incorrect component initialization
        - Memory management issues
        - Threading issues
        
        REQUIREMENTS:
        1. Fix the specific issues causing test failures
        2. Maintain code style and patterns
        3. Add proper null checks and validation
        4. Ensure thread safety where needed
        5. Add comments explaining fixes
        
        Return ONLY the corrected C++ code, no explanations.
        """
            
            def apply_mcp_fix(self, file_path, original_content):
                """Apply MCP-generated fix to file"""
                try:
                    # In a real implementation, this would call the MCP/Codex API
                    # For now, we'll apply common fixes
                    
                    fixed_content = original_content
                    
                    # Common null pointer fixes
                    if "CompanionEmote" in self.failed_tests:
                        # Fix common companion emote null pointer issues
                        fixes = [
                            ("if (CompanionActor)", "if (CompanionActor && IsValid(CompanionActor))"),
                            ("CompanionActor->", "if (IsValid(CompanionActor)) { CompanionActor->"),
                            ("EmoteComponent->", "if (IsValid(EmoteComponent)) { EmoteComponent->"),
                        ]
                        
                        for old, new in fixes:
                            if old in fixed_content:
                                fixed_content = fixed_content.replace(old, new)
                                print(f"‚úÖ Applied fix: {old} -> {new}")
                    
                    # Add null checks for common patterns
                    if "nullptr" not in fixed_content and "IsValid(" not in fixed_content:
                        # Add basic null checks
                        lines = fixed_content.split('\n')
                        for i, line in enumerate(lines):
                            if "->" in line and "if" not in line and "IsValid" not in line:
                                # Add null check before pointer access
                                indent = len(line) - len(line.lstrip())
                                var_name = line.split('->')[0].strip().split()[-1]
                                if var_name and not var_name.startswith('this'):
                                    lines[i] = ' ' * indent + f"if (IsValid({var_name})) {{\n" + line + "\n" + ' ' * indent + "}"
                        
                        fixed_content = '\n'.join(lines)
                    
                    return fixed_content
                    
                except Exception as e:
                    print(f"‚ùå Error applying MCP fix: {e}")
                    return original_content
            
            def run_auto_fix(self):
                """Run the complete auto-fix process"""
                print("ü§ñ Starting MCP auto-fix process...")
                
                if not self.failed_tests:
                    print("‚ÑπÔ∏è No failed tests to fix")
                    return
                
                relevant_files = self.analyze_codebase()
                print(f"üìÅ Found {len(relevant_files)} relevant files")
                
                fixes_applied = []
                
                for file_path in relevant_files[:5]:  # Limit to 5 files
                    try:
                        print(f"üîß Processing: {file_path}")
                        
                        original_content = file_path.read_text(encoding='utf-8')
                        fixed_content = self.apply_mcp_fix(file_path, original_content)
                        
                        if fixed_content != original_content:
                            file_path.write_text(fixed_content, encoding='utf-8')
                            fixes_applied.append(str(file_path))
                            print(f"‚úÖ Applied fixes to: {file_path}")
                        else:
                            print(f"‚ÑπÔ∏è No fixes needed for: {file_path}")
                            
                    except Exception as e:
                        print(f"‚ùå Error processing {file_path}: {e}")
                
                return fixes_applied
        
        # Run MCP Auto-Fix
        if __name__ == "__main__":
            mcp = MCPAutoFix()
            fixes = mcp.run_auto_fix()
            
            if fixes:
                print(f"üéâ Applied fixes to {len(fixes)} files:")
                for fix in fixes:
                    print(f"  - {fix}")
            else:
                print("‚ÑπÔ∏è No fixes were applied")
        EOF
        
        python mcp_auto_fix.py

    - name: üîç Validate Fixes
      run: |
        echo "üîç Validating applied fixes..."
        
        # Check if any files were modified
        if git diff --quiet; then
          echo "‚ÑπÔ∏è No files were modified by MCP auto-fix"
        else
          echo "‚úÖ Files modified by MCP auto-fix:"
          git diff --name-only
          
          # Show the changes
          echo "üìù Changes made:"
          git diff --stat
        fi

    - name: üöÄ Create Auto-Fix PR
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "MCP Auto-Fix Bot"
        
        # Check if there are changes to commit
        if ! git diff --quiet; then
          # Create branch for auto-fix
          branch_name="mcp-auto-fix-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          
          # Commit changes
          git add .
          git commit -m "ü§ñ MCP Auto-Fix: Resolve failed tests
          
          Failed Tests: ${{ needs.analyze-failures.outputs.failed-tests }}
          
          Applied automatic fixes for:
          - Null pointer checks
          - Component validation
          - Memory safety improvements
          
          Generated by MCP Codex Auto-Fix system."
          
          # Push branch
          git push origin "$branch_name"
          
          # Create PR using GitHub CLI (if available) or API
          cat > pr_body.md << EOF
        ## ü§ñ MCP Auto-Fix PR
        
        This PR was automatically generated by the MCP Codex system to fix failed tests.
        
        ### Failed Tests
        \`\`\`
        ${{ needs.analyze-failures.outputs.failed-tests }}
        \`\`\`
        
        ### Error Context
        \`\`\`
        ${{ needs.analyze-failures.outputs.error-logs }}
        \`\`\`
        
        ### Applied Fixes
        - Added null pointer validation
        - Improved component safety checks
        - Enhanced error handling
        
        ### Review Required
        Please review these automated changes before merging.
        EOF
          
          # Create PR via GitHub API
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls" \
            -d "{
              \"title\": \"ü§ñ MCP Auto-Fix: Resolve failed tests\",
              \"head\": \"$branch_name\",
              \"base\": \"${{ github.ref_name }}\",
              \"body\": \"$(cat pr_body.md | jq -Rs .)\"
            }"
          
          echo "üöÄ Auto-fix PR created successfully!"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi
