// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "Engine/World.h"
#include "LevelSequence.h"
#include "LevelSequencePlayer.h"
#include "LevelSequenceActor.h"
#include "Components/AudioComponent.h"
#include "AIDM/CampaignLoaderSubsystem.h"
#include "AIDM/QuestManagerComponent.h"
#include "Audio/VoiceSynthesisComponent.h"
#include "CinematicDirectorActor.generated.h"

/**
 * Cinematic event types
 */
UENUM(BlueprintType)
enum class ECinematicEventType : uint8
{
    Intro           UMETA(DisplayName = "Introduction"),
    QuestStart      UMETA(DisplayName = "Quest Start"),
    QuestComplete   UMETA(DisplayName = "Quest Complete"),
    BossIntro       UMETA(DisplayName = "Boss Introduction"),
    BossDefeat      UMETA(DisplayName = "Boss Defeat"),
    StoryMoment     UMETA(DisplayName = "Story Moment"),
    Dialogue        UMETA(DisplayName = "Dialogue Scene"),
    Transition      UMETA(DisplayName = "Transition"),
    Ending          UMETA(DisplayName = "Ending"),
    Custom          UMETA(DisplayName = "Custom Event")
};

/**
 * Cinematic data structure
 */
USTRUCT(BlueprintType)
struct KOTOR_CLONE_API FCinematicData
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    FString CinematicID;

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    ECinematicEventType EventType;

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    FString Title;

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    FString Description;

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    float Duration; // Duration in seconds

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    TArray<FString> DialogueLines; // Spoken dialogue

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    TArray<FString> ParticipantNPCs; // NPCs involved

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    TArray<FString> CameraShots; // Camera movement descriptions

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    FString MusicTrack; // Background music

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    FString Environment; // Setting description

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    TMap<FString, FString> CustomProperties; // Additional properties

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    bool bSkippable; // Whether player can skip

    UPROPERTY(BlueprintReadWrite, Category = "Cinematic")
    bool bAutoGenerated; // Whether this was auto-generated

    FCinematicData()
    {
        CinematicID = TEXT("");
        EventType = ECinematicEventType::Custom;
        Title = TEXT("");
        Description = TEXT("");
        Duration = 30.0f;
        MusicTrack = TEXT("");
        Environment = TEXT("");
        bSkippable = true;
        bAutoGenerated = false;
    }
};

/**
 * Camera shot data
 */
USTRUCT(BlueprintType)
struct KOTOR_CLONE_API FCameraShot
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    FString ShotName;

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    FVector CameraLocation;

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    FRotator CameraRotation;

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    float Duration;

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    FString TransitionType; // "cut", "fade", "dissolve"

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    AActor* FocusTarget; // Actor to focus on

    UPROPERTY(BlueprintReadWrite, Category = "Camera Shot")
    float FOV; // Field of view

    FCameraShot()
    {
        ShotName = TEXT("");
        CameraLocation = FVector::ZeroVector;
        CameraRotation = FRotator::ZeroRotator;
        Duration = 3.0f;
        TransitionType = TEXT("cut");
        FocusTarget = nullptr;
        FOV = 90.0f;
    }
};

/**
 * Cinematic events
 */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnCinematicStarted, const FCinematicData&, CinematicData);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnCinematicFinished, const FCinematicData&, CinematicData);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnCinematicSkipped, const FCinematicData&, CinematicData);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnDialogueLineSpoken, const FString&, Speaker, const FString&, Line);

/**
 * Cinematic Director Actor - Manages and plays cinematic sequences
 */
UCLASS(BlueprintType, Blueprintable)
class KOTOR_CLONE_API ACinematicDirectorActor : public AActor
{
    GENERATED_BODY()

public:
    ACinematicDirectorActor();

protected:
    virtual void BeginPlay() override;
    virtual void Tick(float DeltaTime) override;

public:
    /**
     * Initialize cinematic director with campaign data
     * @param CampaignLoader Campaign loader for cinematic data
     * @param QuestManager Quest manager for quest-related cinematics
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    void InitializeCinematicDirector(UCampaignLoaderSubsystem* CampaignLoader, UQuestManagerComponent* QuestManager);

    /**
     * Play a cinematic by ID
     * @param CinematicID ID of the cinematic to play
     * @return True if cinematic started successfully
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    bool PlayCinematic(const FString& CinematicID);

    /**
     * Play cinematic by event type
     * @param EventType Type of cinematic event
     * @param Context Additional context for the cinematic
     * @return True if cinematic started successfully
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    bool PlayCinematicByType(ECinematicEventType EventType, const FString& Context = TEXT(""));

    /**
     * Generate and play automatic cinematic
     * @param EventType Type of event
     * @param NPCs NPCs involved in the cinematic
     * @param Location Location where cinematic takes place
     * @return Generated cinematic ID
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    FString GenerateAndPlayCinematic(ECinematicEventType EventType, const TArray<FString>& NPCs, const FString& Location);

    /**
     * Stop current cinematic
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    void StopCurrentCinematic();

    /**
     * Skip current cinematic
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    void SkipCurrentCinematic();

    /**
     * Check if cinematic is currently playing
     * @return True if a cinematic is active
     */
    UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Cinematic Director")
    bool IsCinematicPlaying() const { return bCinematicActive; }

    /**
     * Get current cinematic progress (0.0 to 1.0)
     * @return Current progress
     */
    UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Cinematic Director")
    float GetCinematicProgress() const;

    /**
     * Get current cinematic data
     * @return Current cinematic data
     */
    UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Cinematic Director")
    FCinematicData GetCurrentCinematicData() const { return CurrentCinematicData; }

    /**
     * Register custom cinematic
     * @param CinematicData The cinematic data to register
     */
    UFUNCTION(BlueprintCallable, Category = "Cinematic Director")
    void RegisterCustomCinematic(const FCinematicData& CinematicData);

    /**
     * Get available cinematics
     * @return Array of available cinematic IDs
     */
    UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Cinematic Director")
    TArray<FString> GetAvailableCinematics() const;

    /**
     * Get cinematic data by ID
     * @param CinematicID ID of the cinematic
     * @return Cinematic data
     */
    UFUNCTION(BlueprintCallable, BlueprintPure, Category = "Cinematic Director")
    FCinematicData GetCinematicData(const FString& CinematicID) const;

    // Event delegates
    UPROPERTY(BlueprintAssignable, Category = "Cinematic Events")
    FOnCinematicStarted OnCinematicStarted;

    UPROPERTY(BlueprintAssignable, Category = "Cinematic Events")
    FOnCinematicFinished OnCinematicFinished;

    UPROPERTY(BlueprintAssignable, Category = "Cinematic Events")
    FOnCinematicSkipped OnCinematicSkipped;

    UPROPERTY(BlueprintAssignable, Category = "Cinematic Events")
    FOnDialogueLineSpoken OnDialogueLineSpoken;

protected:
    // Cinematic components
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Components")
    UVoiceSynthesisComponent* VoiceSynthesis;

    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Components")
    UAudioComponent* MusicAudioComponent;

    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Components")
    UAudioComponent* SFXAudioComponent;

    // Cinematic data
    UPROPERTY(BlueprintReadOnly, Category = "Cinematic Director")
    TMap<FString, FCinematicData> RegisteredCinematics;

    // Current state
    UPROPERTY(BlueprintReadOnly, Category = "Cinematic Director")
    bool bCinematicActive;

    UPROPERTY(BlueprintReadOnly, Category = "Cinematic Director")
    FCinematicData CurrentCinematicData;

    UPROPERTY(BlueprintReadOnly, Category = "Cinematic Director")
    float CinematicStartTime;

    UPROPERTY(BlueprintReadOnly, Category = "Cinematic Director")
    int32 CurrentDialogueIndex;

    UPROPERTY(BlueprintReadOnly, Category = "Cinematic Director")
    int32 CurrentShotIndex;

    // Component references
    UPROPERTY()
    UCampaignLoaderSubsystem* CampaignLoaderRef;

    UPROPERTY()
    UQuestManagerComponent* QuestManagerRef;

    // Sequence player
    UPROPERTY()
    ALevelSequenceActor* SequenceActor;

    UPROPERTY()
    ULevelSequencePlayer* SequencePlayer;

    // Camera management
    UPROPERTY()
    TArray<FCameraShot> CurrentCameraShots;

    UPROPERTY()
    AActor* OriginalViewTarget;

    // Settings
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Settings")
    bool bAutoGenerateCinematics;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Settings")
    float DefaultCinematicDuration;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Settings")
    bool bAllowSkipping;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Settings")
    float DialoguePacing; // Seconds between dialogue lines

    // Asset references
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Assets")
    TMap<FString, ULevelSequence*> PredefinedSequences;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Assets")
    TMap<FString, USoundBase*> MusicTracks;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Cinematic Assets")
    TMap<FString, USoundBase*> SoundEffects;

private:
    // Helper methods
    void LoadCinematicsFromCampaign();
    void CreateDefaultCinematics();
    FCinematicData GenerateCinematicForEvent(ECinematicEventType EventType, const TArray<FString>& NPCs, const FString& Location);
    void ExecuteCinematicSequence();
    void PlayNextDialogueLine();
    void PlayNextCameraShot();
    void CompleteCinematic();
    void CleanupCinematic();
    TArray<FCameraShot> GenerateCameraShots(const FCinematicData& CinematicData);
    FString GenerateCinematicID();

    // Timer handles
    FTimerHandle DialogueTimerHandle;
    FTimerHandle CameraTimerHandle;
    FTimerHandle CinematicTimerHandle;

public:
    /**
     * Blueprint implementable events for custom cinematic logic
     */

    /**
     * Called when cinematic starts (for custom setup)
     * @param CinematicData The cinematic being started
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "Cinematic Events")
    void OnCinematicStartedEvent(const FCinematicData& CinematicData);

    /**
     * Called when cinematic finishes (for custom cleanup)
     * @param CinematicData The cinematic that finished
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "Cinematic Events")
    void OnCinematicFinishedEvent(const FCinematicData& CinematicData);

    /**
     * Called to generate custom cinematic (override in Blueprint)
     * @param EventType Type of cinematic event
     * @param NPCs NPCs involved
     * @param Location Location context
     * @return Custom cinematic data
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "Cinematic Events")
    FCinematicData GenerateCustomCinematic(ECinematicEventType EventType, const TArray<FString>& NPCs, const FString& Location);

    /**
     * Called to play custom sequence (override in Blueprint)
     * @param CinematicData The cinematic to play
     * @return True if custom sequence was played
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "Cinematic Events")
    bool PlayCustomSequence(const FCinematicData& CinematicData);

    /**
     * Called when dialogue line is spoken (for custom effects)
     * @param Speaker Name of the speaker
     * @param Line The dialogue line
     * @param LineIndex Index of the line in the sequence
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "Cinematic Events")
    void OnDialogueLineSpokenEvent(const FString& Speaker, const FString& Line, int32 LineIndex);
};
